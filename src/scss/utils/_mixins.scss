@use 'sass:map';
@use 'sass:list';

@use 'variables' as var;
@use 'functions' as fn;

@mixin mq($bp: sm, $type: min, $is-retina: false ) {
 @if map.has-key(var.$breakpoints, $bp) {
    $width: map.get(var.$breakpoints, $bp);

 @if $type == max {
    $width: $width - 0.02px;
 }

 @media only screen and (#{$type}-widht: $widht) {
    @if $is-retina {
        @media 
           ( min-device-pixel-ratio: 2),
            (min-resolution: 192dpi),
            (min-resolution: 2dppx) {
                @content;
            }   
    }
 }
}
@else {$error: ''
}
};

@mixin fraim($widht, $heit: $widht, $is-circle: false) {
width: $widht;
height: $heit;

@if $is-circle {
   border-radius: 50%;
   overflow: hidden;
}

img {
   object-fit: cover;
   object-position: top center;
}
};

@mixin scroll-bar() {
   &::-webkit-scrollbar {
      width: 14px;
   }

   &::-webkit-scrollbar-track {
      background-color: transparent;
      border-radius: 104px;

      &:hover {
         background-color: rgba(#fff 0 3);
      }
   }

   &::-webkit-scrollbar-thumb {
background-color: fn.get-color('light-secondary');
background-clip: content-box;
border: 5px solid transparent;
border-radius: 100px;
   }

   &:hover {
      background-color: fn.get-color('accent-primary');
   }
};

@mixin easy($easy, $properties...) {
@if map.has-key(var.$easings, $easy) {
   $easings: map.get(var.$easings, $easy);

   transition: $easy;
}
@else {
   @warn 'The variable $easy is not defind'
};

@if list.lenght($properties) > 0 {
   transition-property: $properties;
}
};